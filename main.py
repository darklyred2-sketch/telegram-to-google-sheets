#!/usr/bin/env python3
"""
Telegram Emoji Reactor ‚Üí Google Sheets Updater by ID
Senior-level implementation with robust parsing, error handling, async, logging.
"""

import os
import re
import logging
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from typing import Optional, Tuple

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_FILE")
SHEET_NAME = os.getenv("SHEET_NAME", "Logs")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Google Sheets –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
def init_gspread() -> gspread.Worksheet:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ."""
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(GOOGLE_SHEET_ID)
    worksheet = sheet.worksheet(SHEET_NAME)
    return worksheet


def extract_id_from_text(text: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
      - "ID: 12345"
      - "ID=12345"
      - "12345"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É ID –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    if not text:
        return None

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã: "ID: 123", "ID=123", "123"
    patterns = [
        r'ID[:=]\s*(\d+)',   # ID: 123 –∏–ª–∏ ID=123
        r'^\s*(\d+)\s*$',    # —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    ]

    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(1)

    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: '{text}'")
    return None


def update_cell_by_id(worksheet: gspread.Worksheet, target_id: str, value: str) -> bool:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –≤ —Å—Ç–æ–ª–±—Ü–µ A (ID), –æ–±–Ω–æ–≤–ª—è–µ—Ç —è—á–µ–π–∫—É –≤ —Å—Ç–æ–ª–±—Ü–µ H.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ A
        id_column = worksheet.col_values(1)  # –ö–æ–ª–æ–Ω–∫–∞ A
        row_index = None

        for i, cell_value in enumerate(id_column, start=1):
            if cell_value.strip() == target_id:
                row_index = i
                break

        if not row_index:
            logger.warning(f"ID '{target_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–æ–ª–±—Ü–µ A.")
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É H (8-–π —Å—Ç–æ–ª–±–µ—Ü) –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        cell_h = f"H{row_index}"
        worksheet.update(cell_h, [[value]])
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: ID={target_id} ‚Üí H{row_index}='{value}'")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è—á–µ–π–∫–∏ –¥–ª—è ID {target_id}: {e}", exc_info=True)
        return False


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ üëç/üëé."""
    if not update.message:
        return

    message = update.message
    chat_id = message.chat_id
    message_id = message.message_id
    text = message.text or ""
    user = message.from_user
    username = user.username or f"{user.first_name} {user.last_name}".strip()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    target_id = extract_id_from_text(text)
    if not target_id:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ ID: '{text}'")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        reactions = await context.bot.get_message_reactions(chat_id, message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π: {e}")
        return

    # –õ–æ–≥–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
    emoji_to_value = {
        "üëç": "TEST",
        "üëé": "LOW SKILL"
    }

    for reaction in reactions:
        emoji = reaction.emoji
        if emoji in emoji_to_value:
            value = emoji_to_value[emoji]
            logger.info(f"–ü–æ–π–º–∞–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è '{emoji}' –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID={target_id} –æ—Ç @{username}")

            success = update_cell_by_id(init_gspread(), target_id, value)
            if success:
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ID={target_id} ‚Üí {value}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ID={target_id}")
            break  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–µ–∞–∫—Ü–∏—é


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not all([TELEGRAM_BOT_TOKEN, GOOGLE_SHEET_ID, CREDENTIALS_FILE]):
        logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID –∏ —Ä–µ–∞–∫—Ü–∏–π üëç/üëé...")
    app.run_polling()


if __name__ == "__main__":
    main()
