from flask import Flask, request, jsonify
import requests
import os
import base64
import logging
import traceback

# üöÄ –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# üß© –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
APPS_SCRIPT_URL = os.getenv("APPS_SCRIPT_URL")
COMPANY_SCRIPT_URL = os.getenv("COMPANY_SCRIPT_URL")  # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏

# ‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
@app.route('/', methods=['GET'])
def health_check():
    return "OK", 200

# ‚û°Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.errorhandler(Exception)
def handle_exception(e):
    app.logger.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{traceback.format_exc()}")
    return jsonify({"status": "error", "message": str(e)}), 500

# ‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram
@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    try:
        update = request.get_json()
        
        # üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫
        if 'callback_query' in update:
            callback = update['callback_query']
            chat_id = callback['message']['chat']['id']
            data = callback['data']

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            if data == "template_–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫":
                template = (
                    "–ü–æ–∑–∏—Ü–∏—è: SENIOR SDET\n"
                    "–ö–æ–º–∞–Ω–¥–∞: DATAHUB\n"
                    "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å: \n"
                    "\n<a href="https://docs.google.com/document/d/1WD-X-jStPjSgJvs9428u-eHU7QTr6Almc0IgFq3limM/edit?tab=t.0">–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</a>\n"
                    "\n!–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–µ–∑—é–º–µ, –Ω–∞–ø–∏—à–∏ –§–ò–û —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –∏ –ø–æ—Å—Ç–∞–≤—å @ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –±–æ—Ç–∞ –Ω–∏–∂–µ!"
                    "\nOutstaff_connect_bot"
                )
            elif data == "template_devops":
                template = (
                    "–ü–æ–∑–∏—Ü–∏—è: SENIOR DEVOPS\n"
                    "–ö–æ–º–∞–Ω–¥–∞: DATAMASTERS\n"
                    "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å: \n"
                    "\n!–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–µ–∑—é–º–µ, –Ω–∞–ø–∏—à–∏ –§–ò–û —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –∏ –ø–æ—Å—Ç–∞–≤—å @ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –±–æ—Ç–∞ –Ω–∏–∂–µ!"
                    "\nOutstaff_connect_bot"
                )
            elif data == "template_frontend":
                template = (
                    "–ü–æ–∑–∏—Ü–∏—è: SENIOR FRONTEND\n"
                    "–ö–æ–º–∞–Ω–¥–∞: DATAHUB\n"
                    "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å: \n"
                    "\n!–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–µ–∑—é–º–µ, –Ω–∞–ø–∏—à–∏ –§–ò–û —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –∏ –ø–æ—Å—Ç–∞–≤—å @ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –±–æ—Ç–∞ –Ω–∏–∂–µ!"
                    "\nOutstaff_connect_bot"
                )
            elif data == "template_–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä":
                template = (
                    "–ü–æ–∑–∏—Ü–∏—è: MIDDLE DATA ARCHITECT\n"
                    "–ö–æ–º–∞–Ω–¥–∞: DATAPLATFORM\n"
                    "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å: \n"
                    "\n!–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–µ–∑—é–º–µ, –Ω–∞–ø–∏—à–∏ –§–ò–û —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –∏ –ø–æ—Å—Ç–∞–≤—å @ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –±–æ—Ç–∞ –Ω–∏–∂–µ!"
                    "\nOutstaff_connect_bot"
                )
            elif data == "template_PYTHON":
                template = (
                    "–ü–æ–∑–∏—Ü–∏—è: SENIOR DEV PYTHON\n"
                    "–ö–æ–º–∞–Ω–¥–∞: DBAAS\n"
                    "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å: \n"
                    "\n!–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–µ–∑—é–º–µ, –Ω–∞–ø–∏—à–∏ –§–ò–û —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –∏ –ø–æ—Å—Ç–∞–≤—å @ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –±–æ—Ç–∞ –Ω–∏–∂–µ!"
                    "\nOutstaff_connect_bot"
                )
            elif data == "template_–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
                template = (
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: https://docs.google.com/document/d/11PR2EbZZVRao9ypcnoBzjYjRYNCI34a15rvYa0uIsdc/edit?tab=t.0\n"
                )
            else:
                template = "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            send_telegram_message(chat_id, template)

            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            callback_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerCallbackQuery"
            requests.post(callback_url, json={"callback_query_id": callback['id']})

            return jsonify({"status": "callback_handled"}), 200

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'message' not in update:
            app.logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–ª—é—á–∞ 'message' –≤ update")
            return jsonify({"status": "no_message"}), 200

        message = update['message']
        chat = message.get('chat', {})
        chat_id = chat.get('id')
        if not chat_id:
            app.logger.warning("‚ö†Ô∏è –ù–µ—Ç chat_id")
            return jsonify({"status": "no_chat_id"}), 200

        # üìù –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        text = ""
        if 'text' in message:
            text = message['text']
        elif 'caption' in message:
            text = message['caption']
            app.logger.info(f"üìé –ò—Å–ø–æ–ª—å–∑—É—é caption: {text}")
        else:
            app.logger.warning("‚ö†Ô∏è –ù–∏ text, –Ω–∏ caption –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({"status": "no_text"}), 200

        app.logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {repr(text)}")

        # üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if text.startswith('/start'):
            help_text = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ.\n\n–ù–∞–∂–º–∏ /template@Outstaff_connect_bot, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω."
            send_telegram_message(chat_id, help_text)
            return jsonify({"status": "start_sent"}), 200

        # üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /template@Outstaff_connect_bot
        if text == "/template@Outstaff_connect_bot":
            inline_keyboard = [
                [{"text": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "callback_data": "template_–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫"}],
                [{"text": "DEVOPS", "callback_data": "template_devops"}],
                [{"text": "FRONTEND", "callback_data": "template_frontend"}],
                [{"text": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", "callback_data": "template_–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä"}],
                [{"text": "PYTHON", "callback_data": "template_PYTHON"}]
            ]
            send_telegram_inline_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", inline_keyboard)
            return jsonify({"status": "inline_template_sent"}), 200
            

        # üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –±–æ—Ç—É —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
        should_respond = False
        chat_type = chat.get('type', '')

        if chat_type == 'private':
            should_respond = True
            app.logger.info("üë§ –õ–∏—á–Ω—ã–π —á–∞—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")

        elif chat_type in ['group', 'supergroup']:
            bot_username = "@Outstaff_connect_bot"
            entities = message.get('entities', []) + message.get('caption_entities', [])

            for entity in entities:
                if entity.get('type') == 'mention' and 'offset' in entity and 'length' in entity:
                    try:
                        mention = text[entity['offset']:entity['offset'] + entity['length']]
                        if mention.lower() == bot_username.lower():
                            should_respond = True
                            text = text.replace(mention, "").strip()
                            app.logger.info(f"üì¢ –ë–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –≤ –≥—Ä—É–ø–ø–µ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {text}")
                            break
                    except Exception as e:
                        app.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ mention: {e}")
                        continue

        if not should_respond:
            app.logger.info("üîï –ë–æ—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return jsonify({"status": "ignored"}), 200

        # üîç –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
        parsed_data = parse_message(text) if text else {}
        if not parsed_data:
            send_telegram_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü–æ–∑–∏—Ü–∏—è: ...\n–ö–æ–º–∞–Ω–¥–∞: ...\n–°–æ–∏—Å–∫–∞—Ç–µ–ª—å: ...\n–ö–æ–º–ø–∞–Ω–∏—è: ...")
            return jsonify({"status": "parse_failed"}), 200

        # üÜï –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –ø–æ chat_id
        company_name = get_company_by_chat_id(chat_id)
        if company_name:
            parsed_data['–ö–æ–º–ø–∞–Ω–∏—è'] = company_name
            app.logger.info(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ chat_id {chat_id}: {company_name}")
        else:
            app.logger.info(f"‚ÑπÔ∏è –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id {chat_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")

        # üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        has_document = 'document' in message
        has_photo = 'photo' in message and len(message['photo']) > 0
        
        if not has_document and not has_photo:
            error_message = (
                "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏.\n\n"
            )
            send_telegram_message(chat_id, error_message)
            app.logger.warning("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª–∞ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return jsonify({"status": "no_file"}), 200

        # üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ (–¥–æ–∫—É–º–µ–Ω—Ç–∞)
        file_data = None
        if has_document:
            try:
                file_id = message['document']['file_id']
                original_file_name = message['document'].get('file_name', 'unknown_file')
                mime_type = message['document'].get('mime_type', 'application/octet-stream')
                
                applicant_name = parsed_data.get('–°–æ–∏—Å–∫–∞—Ç–µ–ª—å', 'unknown')
                position_name = parsed_data.get('–ü–æ–∑–∏—Ü–∏—è', 'unknown')
                
                if '.' in original_file_name:
                    ext = original_file_name.rsplit('.', 1)[1]
                else:
                    ext = 'pdf'
                
                new_file_name = f"{applicant_name} - {position_name}.{ext}"
                
                file_path = get_telegram_file_path(file_id)
                if file_path:
                    file_content = download_file(file_path)
                    if file_content:
                        file_base64 = base64.b64encode(file_content).decode('utf-8')
                        file_data = {
                            "name": new_file_name,
                            "base64": file_base64,
                            "mimeType": mime_type
                        }
                        app.logger.info(f"üìÑ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {new_file_name}")
            except Exception as e:
                app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
                send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞.")
                return jsonify({"status": "file_processing_error"}), 200

        # üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
        elif has_photo:
            try:
                # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
                photo = message['photo'][-1]
                file_id = photo['file_id']
                
                applicant_name = parsed_data.get('–°–æ–∏—Å–∫–∞—Ç–µ–ª—å', 'unknown')
                position_name = parsed_data.get('–ü–æ–∑–∏—Ü–∏—è', 'unknown')
                new_file_name = f"{applicant_name} - {position_name}.jpg"
                
                file_path = get_telegram_file_path(file_id)
                if file_path:
                    file_content = download_file(file_path)
                    if file_content:
                        file_base64 = base64.b64encode(file_content).decode('utf-8')
                        file_data = {
                            "name": new_file_name,
                            "base64": file_base64,
                            "mimeType": "image/jpeg"
                        }
                        app.logger.info(f"üì∏ –§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {new_file_name}")
            except Exception as e:
                app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
                send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
                return jsonify({"status": "photo_processing_error"}), 200

        # üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Apps Script
        payload = {
            "data": parsed_data,
            "file": file_data,
            "chatId": chat_id  # –î–æ–±–∞–≤–ª—è–µ–º chatId –≤ payload
        }

        try:
            response = requests.post(APPS_SCRIPT_URL, json=payload, timeout=30)
            if response.status_code == 200:
                send_telegram_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –∏ —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É!")
                app.logger.info(f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {parsed_data}, —Ñ–∞–π–ª: {'–¥–∞' if file_data else '–Ω–µ—Ç'}")
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: {response.status_code}"
                send_telegram_message(chat_id, error_msg)
                app.logger.error(error_msg)
        except Exception as e:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
            send_telegram_message(chat_id, error_msg)
            app.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")

        return jsonify({"status": "ok"}), 200

    except Exception as e:
        app.logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ telegram_webhook: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

# üîó –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç Telegram API
def get_telegram_file_path(file_id):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getFile?file_id={file_id}"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                return result['result']['file_path']
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    return None

# üì• –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
def download_file(file_path):
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"
    try:
        response = requests.get(file_url, timeout=30)
        if response.status_code == 200:
            return response.content
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
    return None

# üîç –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥–∞ "–ö–ª—é—á: –ó–Ω–∞—á–µ–Ω–∏–µ"
def parse_message(text):
    try:
        lines = text.strip().split('\n')
        parsed = {}
        for line in lines:
            line = line.strip()
            if ':' in line:
                key, value = line.split(':', 1)
                parsed[key.strip()] = value.strip()
        
        required = ['–ü–æ–∑–∏—Ü–∏—è', '–ö–æ–º–∞–Ω–¥–∞', '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å']
        if all(key in parsed for key in required):
            return parsed
        else:
            app.logger.warning(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π. –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {parsed}")
            return None
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        return None

# üè¢ –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ chat_id –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
def get_company_by_chat_id(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã –ø–æ chat_id"""
    try:
        # –ï—Å–ª–∏ URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if not COMPANY_SCRIPT_URL:
            app.logger.warning("‚ö†Ô∏è COMPANY_SCRIPT_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
            return None
            
        payload = {
            "action": "get_company",
            "chatId": str(chat_id)
        }
        
        response = requests.post(COMPANY_SCRIPT_URL, json=payload, timeout=10)
        if response.status_code == 200:
            result = response.json()
            if result.get('status') == 'success' and result.get('company'):
                return result.get('company')
            else:
                app.logger.warning(f"‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id {chat_id}: {result.get('message', 'Unknown error')}")
        
        return None
        
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ chat_id {chat_id}: {str(e)}")
        return None

# üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text
    }
    try:
        requests.post(url, json=payload, timeout=5)
    except Exception as e:
        app.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {str(e)}")

# üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
def send_telegram_inline_keyboard(chat_id, text, inline_keyboard):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text,
        'reply_markup': {
            'inline_keyboard': inline_keyboard
        }
    }
    try:
        requests.post(url, json=payload, timeout=5)
    except Exception as e:
        app.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {str(e)}")

# üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
