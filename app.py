from flask import Flask, request, jsonify
import requests
import os
import base64
import logging

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
APPS_SCRIPT_URL = os.getenv("APPS_SCRIPT_URL")

# ‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
@app.route('/', methods=['GET'])
def health_check():
    return "OK", 200

# ‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram
@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    update = request.get_json()
    
    chat_id = None
    text = ""
    file_data = None

    if 'message' in update:
        message = update['message']
        chat_id = message['chat']['id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ 'text' –∏–ª–∏ 'caption'
        if 'text' in message:
            text = message['text']
        elif 'caption' in message:
            text = message['caption']
            app.logger.info(f"üìé –ò—Å–ø–æ–ª—å–∑—É—é caption: {text}")
        else:
            app.logger.warning("‚ö†Ô∏è –ù–∏ text, –Ω–∏ caption –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({"status": "no_text"})

        app.logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {repr(text)}")

        # üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –±–æ—Ç—É —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
        should_respond = False

        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ª–∏—á–Ω—ã–π —á–∞—Ç ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º
        if message['chat']['type'] == 'private':
            should_respond = True
            app.logger.info("üë§ –õ–∏—á–Ω—ã–π —á–∞—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")

        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –≥—Ä—É–ø–ø–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        elif message['chat']['type'] in ['group', 'supergroup']:
            bot_username = "@MyResumeBot"  # üî• –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–Å –ò–ú–Ø –ë–û–¢–ê, –Ω–∞–ø—Ä–∏–º–µ—Ä @HR_Bot
            entities = message.get('entities', []) + message.get('caption_entities', [])

            for entity in entities:
                if entity['type'] == 'mention':
                    mention = text[entity['offset']:entity['offset'] + entity['length']]
                    if mention.lower() == bot_username.lower():
                        should_respond = True
                        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥—É
                        text = text.replace(mention, "").strip()
                        app.logger.info(f"üì¢ –ë–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –≤ –≥—Ä—É–ø–ø–µ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {text}")
                        break

        if not should_respond:
            app.logger.info("üîï –ë–æ—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return jsonify({"status": "ignored"})

        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–ø–∞—Ä—Å–∏–Ω–≥, —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Apps Script) ...

# üîó –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç Telegram API
def get_telegram_file_path(file_id):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getFile?file_id={file_id}"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                return result['result']['file_path']
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    return None

# üì• –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
def download_file(file_path):
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"
    try:
        response = requests.get(file_url, timeout=30)
        if response.status_code == 200:
            return response.content
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
    return None

# üîç –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥–∞ "–ö–ª—é—á: –ó–Ω–∞—á–µ–Ω–∏–µ"
def parse_message(text):
    try:
        lines = text.strip().split('\n')  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ –∫—Ä–∞—è–º
        parsed = {}
        for line in lines:
            line = line.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            if ':' in line:
                key, value = line.split(':', 1)  # –î–µ–ª–∏–º —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–º—É –¥–≤–æ–µ—Ç–æ—á–∏—é
                parsed[key.strip()] = value.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required = ['–ü–æ–∑–∏—Ü–∏—è', '–ö–æ–º–∞–Ω–¥–∞', '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å', '–ö–æ–º–ø–∞–Ω–∏—è']
        if all(key in parsed for key in required):
            return parsed
        else:
            app.logger.warning(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π. –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {parsed}")
            return None
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        return None

# üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
def send_telegram_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text
    }
    try:
        requests.post(url, json=payload, timeout=5)
    except Exception as e:
        app.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {str(e)}")

# üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
