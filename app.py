@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    try:
        update = request.get_json()
        
        if 'message' not in update:
            app.logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–ª—é—á–∞ 'message' –≤ update")
            return jsonify({"status": "no_message"}), 200

        message = update['message']
        chat_id = message.get('chat', {}).get('id')
        if not chat_id:
            app.logger.warning("‚ö†Ô∏è –ù–µ—Ç chat_id")
            return jsonify({"status": "no_chat_id"}), 200

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        text = ""
        if 'text' in message:
            text = message['text']
        elif 'caption' in message:
            text = message['caption']
            app.logger.info(f"üìé –ò—Å–ø–æ–ª—å–∑—É—é caption: {text}")
        else:
            app.logger.warning("‚ö†Ô∏è –ù–∏ text, –Ω–∏ caption –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return jsonify({"status": "no_text"}), 200  # üëà –ë–´–õ–û: –Ω–µ –±—ã–ª–æ return!

        app.logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {repr(text)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å
        should_respond = False

        if message['chat']['type'] == 'private':
            should_respond = True
            app.logger.info("üë§ –õ–∏—á–Ω—ã–π —á–∞—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º")

        elif message['chat']['type'] in ['group', 'supergroup']:
            bot_username = "@Outstaff_connect_bot"  # üî• –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–Å –ò–ú–Ø –ë–û–¢–ê
            entities = message.get('entities', []) + message.get('caption_entities', [])

            for entity in entities:
                if entity.get('type') == 'mention' and 'offset' in entity and 'length' in entity:
                    try:
                        mention = text[entity['offset']:entity['offset'] + entity['length']]
                        if mention.lower() == bot_username.lower():
                            should_respond = True
                            text = text.replace(mention, "").strip()
                            app.logger.info(f"üì¢ –ë–æ—Ç —É–ø–æ–º—è–Ω—É—Ç: {text}")
                            break
                    except Exception as e:
                        app.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ mention: {e}")
                        continue

        if not should_respond:
            app.logger.info("üîï –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ‚Äî –±–æ—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç")
            return jsonify({"status": "ignored"}), 200  # üëà –ë–´–õ–û: –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –±—ã–ª–æ return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        file_data = None
        if 'document' in message:
            try:
                file_id = message['document']['file_id']
                file_name = message['document'].get('file_name', 'unknown_file')
                mime_type = message['document'].get('mime_type', 'application/octet-stream')
                
                file_path = get_telegram_file_path(file_id)
                if file_path:
                    file_content = download_file(file_path)
                    if file_content:
                        file_base64 = base64.b64encode(file_content).decode('utf-8')
                        file_data = {
                            "name": file_name,
                            "base64": file_base64,
                            "mimeType": mime_type
                        }
                        app.logger.info(f"üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file_name}")
            except Exception as e:
                app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
        parsed_data = parse_message(text) if text else {}
        if not parsed_data:
            send_telegram_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –§–æ—Ä–º–∞—Ç:\n–ü–æ–∑–∏—Ü–∏—è: ...\n–ö–æ–º–∞–Ω–¥–∞: ...\n–°–æ–∏—Å–∫–∞—Ç–µ–ª—å: ...\n–ö–æ–º–ø–∞–Ω–∏—è: ...")
            return jsonify({"status": "parse_failed"}), 200

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Apps Script
        payload = {
            "data": parsed_data,
            "file": file_data
        }

        try:
            response = requests.post(APPS_SCRIPT_URL, json=payload, timeout=30)
            if response.status_code == 200:
                send_telegram_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –∏ —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É!")
                app.logger.info(f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {parsed_data}, —Ñ–∞–π–ª: {'–¥–∞' if file_data else '–Ω–µ—Ç'}")
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: {response.status_code}"
                send_telegram_message(chat_id, error_msg)
                app.logger.error(error_msg)
        except Exception as e:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
            send_telegram_message(chat_id, error_msg)
            app.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")

        return jsonify({"status": "ok"}), 200  # üëà –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ô RETURN –í –ö–û–ù–¶–ï

    except Exception as e:
        app.logger.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500
